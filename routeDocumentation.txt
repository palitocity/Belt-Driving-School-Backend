Excellent ‚Äî here‚Äôs your **route documentation rewritten professionally**, with consistent formatting, clear explanations, and a structure suitable for a technical document or API reference.

---

# üöó Belt Driving School API ‚Äì User Routes Documentation

## Overview

The following routes handle **user authentication and profile management** within the Belt Driving School system.

> **Note:**
>
> * All issued JWT tokens expire **1 hour** after generation.
> * Ensure each protected route request includes the token in the `Authorization` header as:
>
>   ```
>   Authorization: Bearer <token>
>   ```

---

## üîπ 1. Register a New User

**Endpoint:**

```
POST https://belt-driving-school-backend-3.onrender.com/api/auth/register
```

**Description:**
Creates a new user account in the system.

**Request Body:**

```json
{
  "fullname": "Sheema",
  "email": "Sheema@gmail.com",
  "password": "SamplePassword1233",
  "phone": "+234904034567",
  "role": "user"
}
```

**Successful Response (200 OK):**

```json
{
  "message": "User registered",
  "user": {
    "id": "68e0f177d99d3dc2b79af118",
    "fullName": "Sheema",
    "email": "sheema@gmail.com"
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

**Notes:**

* The `token` should be stored securely on the client side for authentication.
* The `role` field currently accepts `"user"` or `"admin"` depending on user privileges.

---
## üîπ 1. Confirm email

**Endpoint:**

```
POST https://belt-driving-school-backend-3.onrender.com/api/auth/confirm-email
```

**Description:**
Confirms registration email account in the system.

**Request Body:**

```json
{
  "email": "Sheema@gmail.com",
  "code": "292923"
}
```

**Successful Response (200 OK):**

```json
{
   message: "Email successfully verified! You can now log in."
}
```

**Notes:**

* The `token` should be stored securely on the client side for authentication.
* The `role` field currently accepts `"user"` or `"admin"` depending on user privileges.

---

## üîπ 3. User Login

**Endpoint:**

```
POST https://belt-driving-school-backend-3.onrender.com/api/auth/login
```

**Description:**
Authenticates an existing user and issues a new JWT token valid for one hour.

**Request Body:**

```json
{
  "email": "Sheema@gmail.com",
  "password": "SamplePassword1233"
}
```
** not verified ** 
json 

  { error: "Please verify your email before logging in." }

**Successful Response (200 OK):**

```json
{
  "message": "Authenticated",
  "user": {
    "id": "68e0f177d99d3dc2b79af118",
    "fullName": "Sheema",
    "email": "sheema@gmail.com"
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

**Notes:**

* If credentials are invalid, the API returns an authentication error (HTTP 401).
* Tokens from this route must be used to access protected endpoints.

---

## üîπ 4. Retrieve User Information

**Endpoint:**

```
GET https://belt-driving-school-backend-3.onrender.com/api/user/me
```

**Description:**
Fetches the authenticated user‚Äôs profile details using their JWT token.

**Headers:**

```
Authorization: Bearer <token>
```

**Successful Response (200 OK):**

```json
{
  "id": "68e0f177d99d3dc2b79af118",
  "fullName": "Sheema",
  "email": "sheema@gmail.com",
  "role": "user",
  "phone": "+234904034567"
}
```

**Error Response (401 Unauthorized):**

```json
{
  "message": "Token expired or invalid"
}
```

---



## üîπ 4. Retrieve User Transaction

**Endpoint:**

```
GET https://belt-driving-school-backend-3.onrender.com/api/user/transactions
```

**Description:**
Fetches the authenticated user‚Äôs transaction details using their JWT token.

**Headers:**

```
Authorization: Bearer <token>
```

**Successful Response (200 OK):**

```json
{
  "id": "68e0f177d99d3dc2b79af118",
  "fullName": "Sheema",
  "email": "sheema@gmail.com",
  "role": "user",
  "phone": "+234904034567"
}
```

**Error Response (401 Unauthorized):**

```json
{
  "message": "Token expired or invalid"
}
```



These routes handle the **password recovery process** for both users and administrators.
They include generating a **secure password reset token** and submitting a **new password** through a verified link.

> **Note:**
>
> * Reset links are valid for **15 minutes**.
> * Both **users** and **admins** can initiate password resets.
> * Tokens are **JWT-based** and securely signed with the server‚Äôs secret key.

---

## üîπ 1. Request Password Reset (Forgot Password)

**Endpoint:**

```
POST https://belt-driving-school-backend-3.onrender.com/api/auth/forgot-password
```

**Description:**
Generates a temporary **password reset link** and sends it to the user‚Äôs or admin‚Äôs email address.
The link contains a secure token valid for **15 minutes**.

**Request Body:**

```json
{
  "email": "Sheema@gmail.com",
  "role": "user"
}
```

| Field | Type   | Required | Description                                   |
| ----- | ------ | -------- | --------------------------------------------- |
| email | string | ‚úÖ Yes    | The email address associated with the account |
| role  | string | ‚úÖ Yes    | Either `"user"` or `"admin"`                  |

**Successful Response (200 OK):**

```json
{
  "message": "Password reset link generated",
  "resetUrl": "http://localhost:3000/reset-password?token=eyJhbGciOi...&role=user"
}
```

**Error Responses:**

| Code | Message                       |
| ---- | ----------------------------- |
| 400  | `Email and role are required` |
| 404  | `Account not found`           |
| 500  | `Internal server error`       |

**Notes:**

* The backend generates a JWT-based token and stores it in the database with a 15-minute expiry time.
* The token should be sent via email (email-sending logic can be integrated later using **Nodemailer** or any SMTP service).

---

## üîπ 2. Reset Password

**Endpoint:**

```
POST https://belt-driving-school-backend-3.onrender.com/api/auth/reset-password
```

**Description:**
Resets the password of a verified user or admin using a valid **reset token**.
Once successful, the token is invalidated to prevent reuse.

**Request Body:**

```json
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "newPassword": "NewStrongPassword123!",
  "role": "user"
}
```

| Field       | Type   | Required | Description                                       |
| ----------- | ------ | -------- | ------------------------------------------------- |
| token       | string | ‚úÖ Yes    | JWT reset token generated from `/forgot-password` |
| newPassword | string | ‚úÖ Yes    | The new password to set                           |
| role        | string | ‚úÖ Yes    | Either `"user"` or `"admin"`                      |

**Successful Response (200 OK):**

```json
{
  "message": "Password reset successful"
}
```

**Error Responses:**

| Code | Message                              |
| ---- | ------------------------------------ |
| 400  | `Invalid or expired token`           |
| 400  | `Token, password, and role required` |
| 500  | `Internal server error`              |

**Notes:**

* Once the password is successfully changed:

  * The reset token and expiration fields are cleared.
  * The new password is hashed using **bcrypt** before saving.
* Tokens automatically expire after **15 minutes**.

---

## ‚öôÔ∏è Technical Flow

| Step | Action                       | Description                                                              |
| ---- | ---------------------------- | ------------------------------------------------------------------------ |
| 1    | User requests password reset | `/forgot-password` generates a secure JWT and stores it in the DB.       |
| 2    | Email sent                   | The user receives a link containing the token and role parameters.       |
| 3    | User submits new password    | `/reset-password` validates the token and updates the password securely. |

---

## üîí Summary

| Action                 | Method | Endpoint                    | Auth Required |
| ---------------------- | ------ | --------------------------- | ------------- |
| Request password reset | `POST` | `/api/auth/forgot-password` | ‚ùå No          |
| Reset password         | `POST` | `/api/auth/reset-password`  | ‚ùå No          |


## ‚öôÔ∏è Summary

| Action             | Method | Endpoint             | Auth Required |
| ------------------ | ------ | -------------------- | ------------- |
| Register new user  | `POST` | `/api/auth/register` | ‚ùå No          |
| Login              | `POST` | `/api/auth/login`    | ‚ùå No          |
| Retrieve user info | `GET`  | `/api/user/me`       | ‚úÖ Yes         |

---

Would you like me to format this in **Markdown for GitHub**, or as a **technical API reference document (PDF or DOCX)** you can share with your development team or clients?
